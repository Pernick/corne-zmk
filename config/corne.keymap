#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "../zmk-nodefree-config/helper.h"

#define MAIN 0
#define LOWER 1
#define RAISE 2

#define ___ &trans
#define MEH(tap_key) &kp LS(LA(LC(tap_key)))
#define HYPER(tap_key) &kp LS(LA(LC(LG(tap_key))))

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
ZMK_BEHAVIOR(NAME, hold_tap, \
    flavor = "balanced"; \
    tapping-term-ms = <280>; \
    quick-tap-ms = <QUICK_TAP_MS>; \
    global-quick-tap-ms = <150>; \
    bindings = <HOLD>, <TAP>; \
    hold-trigger-key-positions = <TRIGGER_POS>; \
    hold-trigger-on-release; \
)
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* Layers */

ZMK_LAYER(main,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬──────────────┬────────────┬─────────────╮
    &kp TAB       &kp Q         &kp W         &kp E         &kp R          &kp T          &kp Y         &kp U         &kp I         &kp O          &kp P        MEH(LGUI)
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼──────────────┼────────────┼─────────────┤
    &kp ESC       &kp A         &kp S         &kp D         &kp F          &kp G          &kp H         &kp J         &kp K         &kp L          &kp SEMI     &kp SQT
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼──────────────┼────────────┼─────────────┤
    &kp LSHFT     &kp Z         &kp X         &kp C         &kp V          &kp B          &kp N         &kp M         &kp COMMA     &kp DOT        &kp FSLH     &kp LCTRL
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴──────────────┴────────────┴─────────────╯
                                              &kp LGUI      &mo 1          &kp SPACE     &hmr LALT RET  &kp BSPC      &to 2
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                          
)

ZMK_LAYER(lower,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬──────────────┬────────────┬─────────────╮
    ___           &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT       &kp CARET     &kp AMPS      &kp STAR      &kp LPAR       &kp RPAR     ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼──────────────┼────────────┼─────────────┤
    &to 0         &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp MINUS     &kp EQUAL     &kp LBKT      &kp RBKT       &kp BSLH     &kp GRAVE 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼──────────────┼────────────┼─────────────┤
    ___           &kp N6        &kp N7        &kp N8        &kp N9        &kp N0          &kp UNDER     &kp PLUS      &kp LBRC      &kp RBRC       &kp PIPE     &kp TILDE   
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴──────────────┴────────────┴─────────────╯
                                              ___           ___           ___             ___           ___           ___   
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                          
)

ZMK_LAYER(raise,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬──────────────┬────────────┬─────────────╮
    ___           HYPER(N1)     HYPER(N2)     HYPER(N3)     HYPER(N4)     HYPER(N5)       ___           ___           ___           ___            ___          ___   
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼──────────────┼────────────┼─────────────┤
    &to 0         HYPER(Q)      HYPER(W)      HYPER(E)      HYPER(R)      HYPER(T)        ___           ___           ___           ___            ___          ___   
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼──────────────┼────────────┼─────────────┤
    ___           ___           ___           ___           ___           ___             ___           ___           ___           ___            ___          ___   
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴──────────────┴────────────┴─────────────╯
                                              ___           ___           ___             ___           ___           ___
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                          
)
